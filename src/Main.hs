-- automatically generated by BNF Converter
module Main where

import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )

import Control.Monad.Except
import Control.Monad.Reader

import Syntax.LexCatt
import Syntax.ParCatt
import Syntax.SkelCatt
import Syntax.PrintCatt
import Syntax.AbsCatt

import Syntax.ErrM
import TypeChecker

--
--  Main
--

checkStr :: String -> IO ()
checkStr s =
  let ts = tokens s
  in case pProg ts of
       Bad s           -> do putStrLn "\nParse Failed!\n"
                             putStrLn s
                             exitFailure
       Ok (Prog decls) -> do putStrLn "\nParse Successful!"
                             putStrLn "Now checking ..."
                             --putStrLn $ "\n[Abstract Syntax]\n\n" ++ show tree
                             --putStrLn $ "\n[Linearized tree]\n\n" ++ printTree tree
                             res <- runExceptT $ runReaderT (checkDecls decls) emptyEnv
                             case res of
                               (Left msg) -> putStrLn $ "Failure: " ++ msg
                               (Right _) -> putStrLn "Success"
                             exitSuccess

-- checking the content of a file.
checkFile :: String -> IO ()
checkFile file = checkStr =<< readFile file

-- main routine to execute at a command line.
main :: IO ()
main = do args <- getArgs
          case args of [file] -> checkFile file
                       _      -> putStrLn "usage: opetopictt FILE"



